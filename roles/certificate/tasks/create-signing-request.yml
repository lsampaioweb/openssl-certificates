---
- name: "Including config files for '{{ certificate_path | basename }}'"
  ansible.builtin.include_tasks: "include-config-files.yml"
  when: include_config_files

- name: "Creating dependencies, if they do not already exist"
  ansible.builtin.include_tasks: "verify-if-dependencies-exist.yml"
  vars:
    dependencies_list:
      - "privatekey"

- name: "Creating variables"
  ansible.builtin.set_fact:
    certificate_name: "{{ temp_certificate_name }}"
    csr_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ csr_extention }}"
  vars:
    temp_certificate_name: "{{ certificate_path | basename }}"

- name: "Verifying if '{{ csr_path }}' file exists"
  ansible.builtin.stat:
    path: "{{ csr_path }}"
  register: file_exists

- name: "Creating the should_create_file variable"
  ansible.builtin.set_fact:
    should_create_file: "{{ not file_exists.stat.exists }}"

- name: "Including task to delete files that depend on the certificate signing request"
  ansible.builtin.include_tasks: "delete-files-that-depend.yml"
  vars:
    depend_on:
      - "certificate-signing-request"
  when: should_create_file

- name: "Creating the specific variables"
  ansible.builtin.set_fact:
    privatekey_path: "{{ certificate_path }}/{{ certificate_name }}.{{ privatekey_extention }}"
    passphrase: "{{ lookup('template', '../templates/get-password-from-secret-manager.j2') }}"
  vars:
    password_id: "{{ certificate_name }}"
  when: should_create_file

- name: "Printing variables"
  ansible.builtin.debug:
    msg:
      - "Should create file           : {{ should_create_file }}"
      - "CSR path                     : {{ csr_path }}"
      - "Default digest               : {{ csr_digest }}"
      - "Country name                 : {{ csr_country_name }}"
      - "State or province name       : {{ csr_state_or_province_name }}"
      - "Locality name                : {{ csr_locality_name }}"
      - "Organization name            : {{ csr_organization_name }}"
      - "Organization unit name       : {{ csr_organizational_unit_name }}"
      - "Common name                  : {{ csr_common_name | default(certificate_name, true) }}"
      - "Email address                : {{ csr_email_address | b64decode }}"
      - "Subject alt name             : {{ csr_subject_alt_name | default(['DNS:' + certificate_name], true) }}"
      - "basic_constraints critical   : {{ csr_basic_constraints_critical | default(omit, true) }}"
      - "Basic constraints            : {{ csr_basic_constraints | default(omit, true) }}"
      - "Key usage critical           : {{ csr_key_usage_critical | default(omit, true) }}"
      - "key usage                    : {{ csr_key_usage | default(omit, true) }}"
      - "Extended key usage critical  : {{ csr_extended_key_usage_critical | default(omit, true) }}"
      - "Extended key usage           : {{ csr_extended_key_usage | default(omit, true) }}"
      - "Privatekey path              : {{ privatekey_path }}"
  tags: "debug"

- name: "Creating a certificate signing request (CSR)"
  community.crypto.openssl_csr:
    path: "{{ csr_path }}"

    digest: "{{ csr_digest }}"
    country_name: "{{ csr_country_name }}"
    state_or_province_name: "{{ csr_state_or_province_name }}"
    locality_name: "{{ csr_locality_name }}"
    organization_name: "{{ csr_organization_name }}"
    organizational_unit_name: "{{ csr_organizational_unit_name }}"
    common_name: "{{ csr_common_name | default(certificate_name, true) }}"
    email_address: "{{ csr_email_address | b64decode }}"
    subject_alt_name: "{{ csr_subject_alt_name | default(['DNS:' + certificate_name], true) }}"

    basic_constraints_critical: "{{ csr_basic_constraints_critical | default(omit, true) }}"
    basic_constraints: "{{ csr_basic_constraints | default(omit, true) }}"

    key_usage_critical: "{{ csr_key_usage_critical | default(omit, true) }}"
    key_usage: "{{ csr_key_usage | default(omit, true) }}"

    extended_key_usage_critical: "{{ csr_extended_key_usage_critical | default(omit, true) }}"
    extended_key_usage: "{{ csr_extended_key_usage | default(omit, true) }}"

    privatekey_path: "{{ privatekey_path }}"
    privatekey_passphrase: "{{ passphrase | default(omit, true) }}"
  when: should_create_file

- name: "Reseting variables for next elements in the loop (if any)"
  ansible.builtin.set_fact:
    passphrase: ""
