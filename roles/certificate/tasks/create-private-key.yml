---
- name: "Including config files for '{{ certificate_path | basename }}'"
  ansible.builtin.include_tasks: "include-config-files.yml"
  when: include_config_files

- name: "Creating variables"
  ansible.builtin.set_fact:
    privatekey_name: "{{ temp_certificate_name }}"
    privatekey_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ privatekey_extention }}"
  vars:
    temp_certificate_name: "{{ certificate_path | basename }}"

- name: "Verifying if '{{ privatekey_path }}' file exists"
  ansible.builtin.stat:
    path: "{{ privatekey_path }}"
  register: "file_exists"

- name: "Creating the should_create_file variable"
  ansible.builtin.set_fact:
    should_create_file: "{{ not file_exists.stat.exists }}"

- name: "Including task to delete files that depend on the private key"
  ansible.builtin.include_tasks: "delete-files-that-depend.yml"
  vars:
    depend_on:
      - "privatekey"
  when: should_create_file

- name: "Creating a random password with {{ privatekey_passphrase_size }} characters"
  ansible.builtin.set_fact:
    passphrase: "{{ lookup('pipe', 'openssl rand -base64 ' + size + ' | tr -d =+/ | colrm ' + cut_size) }}"
  vars:
    size: "{{ privatekey_passphrase_size | string }}"
    cut_size: "{{ (privatekey_passphrase_size + 1) | string }}"
  when: should_create_file and privatekey_passphrase == "?"
  no_log: true

- name: "Setting the password as an empty string because privatekey_passphrase is empty"
  ansible.builtin.set_fact:
    passphrase: ""
  when: should_create_file and privatekey_passphrase == ""

- name: "Printing variables"
  ansible.builtin.debug:
    msg:
      - "Should create file : {{ should_create_file }}"
      - "Privatekey path    : {{ privatekey_path }}"
      - "Privatekey type    : {{ privatekey_type }}"
      - "Privatekey size    : {{ privatekey_size | default(omit, true) }}"
      - "Privatekey cipher  : {{ (passphrase is defined and passphrase != '') | ternary(privatekey_cipher, omit) }}"
  tags: "debug"

- name: "Creating a private key"
  community.crypto.openssl_privatekey:
    path: "{{ privatekey_path }}"
    type: "{{ privatekey_type }}"
    size: "{{ privatekey_size | default(omit, true) }}"
    passphrase: "{{ passphrase | default(omit, true) }}"
    cipher: "{{ (passphrase is defined and passphrase != '') | ternary(privatekey_cipher, omit) }}"
  register: "file_creation_output"
  when: should_create_file

- name: "Saving the password of the private key in the secret manager"
  ansible.builtin.import_tasks: "save-password.yml"
  vars:
    password_id: "{{ privatekey_name }}"
    password: "{{ passphrase }}"
  when: should_create_file and not file_creation_output.failed
  no_log: true

- name: "Reseting variables for next elements in the loop (if any)"
  ansible.builtin.set_fact:
    passphrase: ""
