---
- name: Including config files for "{{ certificate_path | basename }}"
  include_tasks: "include-config-files.yml"
  when: include_config_files

- name: Creating variables
  set_fact:
    privatekey_name: "{{ temp_certificate_name }}"
    privatekey_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ privatekey_extention }}"
  vars:
    temp_certificate_name: "{{ certificate_path | basename }}"

- name: Verifying if "{{ privatekey_path }}" file exists
  stat:
    path: "{{ privatekey_path }}"
  register: file_exists

- name: Creating the should_create_file variable
  set_fact:
    should_create_file: "{{ not file_exists.stat.exists }}"

- name: Including task to delete files that depend on the private key
  include_tasks: "delete-files-that-depend.yml"
  vars:
    depend_on:
      - "privatekey"
  when: should_create_file

- name: Creating a random password with {{ privatekey_passphrase_size }} characters
  set_fact:
    passphrase: '{{ lookup(''pipe'', ''openssl rand -base64 {{ privatekey_passphrase_size }} | tr -d "=+/" | colrm {{ privatekey_passphrase_size + 1 }}'') }}'
  when: should_create_file and privatekey_passphrase == "?"

- name: Setting the password as an empty string because found ""
  set_fact:
    passphrase: ""
  when: should_create_file and privatekey_passphrase == ""

- name: Printing variables
  debug:
    msg:
      - "Should create file : {{ should_create_file }}"
      - "Privatekey path    : {{ privatekey_path }}"
      - "Privatekey type    : {{ privatekey_type }}"
      - "Privatekey size    : {{ privatekey_size }}"
      - "Privatekey cipher  : {{ (passphrase != '') | ternary(privatekey_cipher, omit) }}"
  when: debug | bool and should_create_file | bool

- name: Creating a private key
  openssl_privatekey:
    path: "{{ privatekey_path }}"
    type: "{{ privatekey_type }}"
    size: "{{ privatekey_size }}"
    passphrase: "{{ passphrase | default(omit, true) }}"
    cipher: "{{ (passphrase != '') | ternary(privatekey_cipher, omit) }}"
  register: file_creation_output
  when: should_create_file

- name: Saving the password of the private key in the secret manager
  import_tasks: "save-password.yml"
  vars:
    password_id: "{{ privatekey_name }}"
    password: "{{ passphrase }}"
  when: should_create_file and not file_creation_output.failed
  no_log: true

- name: Reseting variables for next elements in the loop (if any)
  set_fact:
    passphrase: ""
