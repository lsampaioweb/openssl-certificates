---
- name: "Creating variables"
  ansible.builtin.set_fact:
    host: "{{ host_config.host }}"
    keychain_path: "{{ host_config.keychain_path }}"

    certificate_name: "{{ temp_certificate_name }}"
    ssl_certificate_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ certificate_extention }}"
    ssl_certificate_tmp_path: "{{ host_config.temp_folder }}/{{ temp_certificate_name }}.{{ certificate_extention }}"
  vars:
    temp_certificate_name: "{{ certificate_path | basename }}"

- name: "Adding the fingerprint of the host into the known_hosts file"
  ansible.builtin.include_tasks: "../known-hosts.yml"

- name: "Verifying if '{{ ssl_certificate_path }}' file exists"
  ansible.builtin.stat:
    path: "{{ ssl_certificate_path }}"
  register: "file_exists"

- name: "Getting info about the certificate"
  community.crypto.x509_certificate_info:
    path: "{{ ssl_certificate_path }}"
  register: "new_cert_info"
  when: file_exists.stat.exists | bool

- name: "Block of tasks to import certificate in a MacOSX"
  block:
    - name: "Checking if the certificate is already imported into the keychain"
      delegate_to: "{{ host }}"
      ansible.builtin.shell: "security find-certificate -c '{{ new_cert_info.subject.commonName }}' -p | openssl x509 -text | grep 'Not After'"
      register: "current_cert_info"
      when: file_exists.stat.exists | bool
      changed_when: false

    - name: "Exiting because the host is unreachable"
      ansible.builtin.fail:
        msg: "{{ host }} is unreachable"
      when: current_cert_info.unreachable

    - name: "Creating the should_import_certificate variable"
      ansible.builtin.set_fact:
        should_import_certificate:
          "{{ (new_cert_exists_and_not_expired) and (current_cert_info.rc != 0 or (current_cert_info.rc == 0 and expire_dates_are_different)) }}"
      vars:
        new_cert_exists_and_not_expired: "{{ file_exists.stat.exists and not new_cert_info.expired }}"
        new_cert_expire_day: "{{ new_cert_info.not_after | to_datetime('%Y%m%d%H%M%SZ') if (new_cert_info.rc == 0) else '' }}"
        current_cert_expire_day: "{{ current_cert_info.stdout[24:49] | to_datetime('%b %d %H:%M:%S %Y %Z') if (current_cert_info.rc == 0) else '' }}"
        expire_dates_are_different: "{{ new_cert_expire_day != current_cert_expire_day }}"
      when: file_exists.stat.exists | bool

    - name: "Printing variables"
      ansible.builtin.debug:
        msg:
          - "should_import_certificate : {{ should_import_certificate }}"
          - "Certificate path          : {{ ssl_certificate_tmp_path }}"
          - "Common Name               : {{ new_cert_info.subject.commonName }}"
          - "Expired                   : {{ new_cert_info.expired }}"
          - "Should import certificate : {{ should_import_certificate }}"
          - "Cert Info expired day     : {{ new_cert_expire_day }}"
          - "Imported cert expired day : {{ current_cert_expire_day }}"
      vars:
        new_cert_expire_day: "{{ new_cert_info.not_after | to_datetime('%Y%m%d%H%M%SZ') }}"
        current_cert_expire_day: "{{ current_cert_info.stdout[24:49] | to_datetime('%b %d %H:%M:%S %Y %Z') }}"
      when: debug | bool

    - name: "Copying the certificate file to the specified destination"
      delegate_to: "{{ host }}"
      ansible.builtin.copy:
        src: "{{ ssl_certificate_path }}"
        dest: "{{ ssl_certificate_tmp_path }}"
        mode: "preserve"
      when: should_import_certificate | bool

    - name: "Allowing Ansible to write into the com.apple.trust-settings.admin settings"
      delegate_to: "{{ host }}"
      become: true
      ansible.builtin.command: "/usr/bin/security authorizationdb write com.apple.trust-settings.admin allow"
      when: should_import_certificate | bool

    - name: "Importing the certificate into the keychain"
      delegate_to: "{{ host }}"
      become: true
      ansible.builtin.command: "/usr/bin/security add-trusted-cert -d -r trustRoot -k {{ keychain_path }} '{{ ssl_certificate_tmp_path }}'"
      register: "output"
      when: should_import_certificate | bool

    - name: "Denying Ansible to write into the com.apple.trust-settings.admin settings"
      delegate_to: "{{ host }}"
      become: true
      ansible.builtin.command: "/usr/bin/security authorizationdb remove com.apple.trust-settings.admin"
      when: should_import_certificate | bool

    - name: "Deleting the certificate file that was copied to {{ host }}"
      delegate_to: "{{ host }}"
      ansible.builtin.file:
        path: "{{ ssl_certificate_tmp_path }}"
        state: "absent"
      when: should_import_certificate | bool

  rescue:
    - name: "Print when errors"
      ansible.builtin.debug:
        msg: "Could not import the certificate in the host"

  ignore_unreachable: true
