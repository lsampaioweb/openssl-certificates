---
- name: Creating variables
  ansible.builtin.set_fact:
    host: "{{ host_config.host }}"
    url: "{{ host_config.url }}"
    port: "{{ host_config.port }}"
    tmp_folder: "{{ host_config.tmp_folder }}"

    ssl_certificate_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ certificate_extention }}"
    privatekey_path: "{{ certificate_path }}/{{ temp_certificate_name }}.{{ privatekey_extention }}"

    ssl_certificate_name: "{{ temp_certificate_name }}.{{ certificate_extention }}"
    privatekey_name: "{{ temp_certificate_name }}.{{ privatekey_extention }}"
  vars:
    temp_certificate_name: "{{ certificate_path | basename }}"

- name: Verifying if "{{ ssl_certificate_path }}" file exists
  ansible.builtin.stat:
    path: "{{ ssl_certificate_path }}"
  register: certificate_file_exists

- name: Getting info about the certificate
  community.crypto.x509_certificate_info:
    path: "{{ ssl_certificate_path }}"
  register: new_certificate_info
  when: certificate_file_exists.stat.exists | bool

- name: Getting the current (if any) certificate from url {{ url }}
  get_certificate:
    host: "{{ url }}"
    port: "{{ port }}"
  register: current_certificate_info
  when: certificate_file_exists.stat.exists | bool and not new_certificate_info.expired

- name: Verifying if "{{ privatekey_path }}" file exists
  ansible.builtin.stat:
    path: "{{ privatekey_path }}"
  register: privatekey_file_exists

- name: Creating the should_import_certificate variable
  ansible.builtin.set_fact:
    should_import_certificate: "{{ certificate_file_exists.stat.exists | bool and not new_certificate_info.expired and privatekey_file_exists.stat.exists | bool and (current_certificate_info.not_after | to_datetime('%Y%m%d%H%M%SZ') != new_certificate_info.not_after | to_datetime('%Y%m%d%H%M%SZ')) }}"

- name: Printing variables
  ansible.builtin.debug:
    msg:
      - "should_import_certificate  : {{ should_import_certificate }}"
      - "host                       : {{ host }}"
      - "url                        : {{ url }}"
      - "port                       : {{ port }}"
      - "tmp_folder                 : {{ tmp_folder }}"

      - "ssl_certificate_path       : {{ ssl_certificate_path }}"
      - "privatekey_path            : {{ privatekey_path }}"

      - "ssl_certificate_name       : {{ ssl_certificate_name }}"
      - "privatekey_name            : {{ privatekey_name }}"
  when: debug | bool

- name: Copying certificate and private key to {{ host }}
  delegate_to: "{{ host }}"
  ansible.builtin.copy:
    src: "{{ file.src }}"
    dest: "{{ tmp_folder }}/{{ file.dest }}"
    mode: "644"
  loop:
    - { src: "{{ ssl_certificate_path }}", dest: "{{ ssl_certificate_name }}" }
    - { src: "{{ privatekey_path }}", dest: "{{ privatekey_name }}" }
  loop_control:
    loop_var: file
  when: should_import_certificate | bool

- name: Importing the certificate and private key into {{ host }}
  delegate_to: "{{ host }}"
  become: true
  ansible.builtin.command: "pvenode cert set {{ tmp_folder }}/{{ ssl_certificate_name }} {{ tmp_folder }}/{{ privatekey_name }} --force --restart"
  register: output
  when: should_import_certificate | bool

- name: Deleting the certificate and private key files from {{ host }}
  delegate_to: "{{ host }}"
  ansible.builtin.file:
    path: "{{ tmp_folder }}/{{ file }}"
    state: absent
  loop:
    - "{{ ssl_certificate_name }}"
    - "{{ privatekey_name }}"
  loop_control:
    loop_var: file
  when: should_import_certificate | bool
